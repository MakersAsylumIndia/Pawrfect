#include <SPI.h>
#include <MFRC522.h>
#include <ESP32Servo.h>

// --- RC522 RFID ---
#define SS_PIN    21
#define RST_PIN   22
MFRC522 mfrc522(SS_PIN, RST_PIN);
const byte TARGET_UID[] = {0x11, 0x27, 0xEE, 0x00};
const int UID_SIZE = sizeof(TARGET_UID);

// --- Pins ---
#define WHEEL_SERVO_PIN 4
#define FLAP_SERVO_PIN  26
#define TRIG_PIN 5
#define ECHO_PIN 12
#define MANUAL_BUTTON_PIN 32
#define LED_INDICATOR_PIN 2

const float MAX_DISTANCE_CM = 15.0;
unsigned long lastFeedTime = 0;
const unsigned long FEED_COOLDOWN_MS = 5000;

// --- Servos ---
Servo wheelServo;
Servo flapServo;

// --- Servo Angles ---
const int WHEEL_LOCKED_ANGLE = 0;
const int WHEEL_DISPENSE_ANGLE = 180;
const int FLAP_CLOSED_ANGLE = 0;
const int FLAP_OPEN_ANGLE = 120;

// --- Manual Button State ---
bool lastButtonState = HIGH;  // starts unpressed

// --- Helper Functions ---
bool compareUID(byte *readUID, int readSize) {
  if (readSize != UID_SIZE) return false;
  for (int i = 0; i < UID_SIZE; i++) {
    if (readUID[i] != TARGET_UID[i]) return false;
  }
  return true;
}

float getDistanceCM() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  long duration = pulseIn(ECHO_PIN, HIGH);
  return (duration * 0.0343) / 2.0;
}

void initiateFeedSequence() {
  Serial.println("--- FEED SEQUENCE STARTED ---");
  lastFeedTime = millis();

  digitalWrite(LED_INDICATOR_PIN, HIGH);

  wheelServo.write(WHEEL_DISPENSE_ANGLE);
  delay(1000);
  wheelServo.write(WHEEL_LOCKED_ANGLE);
  delay(1000);

  digitalWrite(LED_INDICATOR_PIN, LOW);
  Serial.println("--- FEED SEQUENCE COMPLETE ---");
}

// --- Setup ---
void setup() {
  Serial.begin(115200);
  SPI.begin();
  mfrc522.PCD_Init();

  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(LED_INDICATOR_PIN, OUTPUT);
  pinMode(MANUAL_BUTTON_PIN, INPUT_PULLUP);

  wheelServo.attach(WHEEL_SERVO_PIN);
  flapServo.attach(FLAP_SERVO_PIN);
  wheelServo.write(WHEEL_LOCKED_ANGLE);
  flapServo.write(FLAP_CLOSED_ANGLE);

  digitalWrite(LED_INDICATOR_PIN, LOW);

  Serial.println("Smart Pet Feeder Ready.");
  Serial.println("⚡ Buck converter: Use 9V–12V input → set output to 5.0V for ESP32 + Servos");
}

// --- Loop ---
void loop() {
  // --- Manual Button (one-press logic) ---
  bool currentButtonState = digitalRead(MANUAL_BUTTON_PIN);

  // Detect a new press (HIGH → LOW)
  if (lastButtonState == HIGH && currentButtonState == LOW) {
    Serial.println("Manual Button Pressed!");
    delay(200); // debounce
    initiateFeedSequence();
  }
  lastButtonState = currentButtonState;  // store state

  // --- Cooldown ---
  if (millis() - lastFeedTime < FEED_COOLDOWN_MS) {
    delay(500);
    return;
  }

  // --- Ultrasonic Detection ---
  float distance = getDistanceCM();
  if (distance > 0 && distance <= MAX_DISTANCE_CM) {
    Serial.println("Pet detected! Checking RFID...");
    if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
      if (compareUID(mfrc522.uid.uidByte, mfrc522.uid.size)) {
        Serial.println("RFID Match! Feeding...");
        initiateFeedSequence();
      } else {
        Serial.println("Wrong tag.");
      }
      mfrc522.PICC_HaltA();
      mfrc522.PCD_StopCrypto1();
    }
  } else {
    Serial.println("Waiting for pet...");
  }

  delay(200);
}
